# Python stubs generated by omniidl from projet.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


#
# Start of module "M"
#
__name__ = "M"
_0_M = omniORB.openModule("M", r"projet.idl")
_0_M__POA = omniORB.openModule("M__POA", r"projet.idl")


# interface Bac
_0_M._d_Bac = (omniORB.tcInternal.tv_objref, "IDL:M/Bac:1.0", "Bac")
omniORB.typeMapping["IDL:M/Bac:1.0"] = _0_M._d_Bac
_0_M.Bac = omniORB.newEmptyClass()
class Bac :
    _NP_RepositoryId = _0_M._d_Bac[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_M.Bac = Bac
_0_M._tc_Bac = omniORB.tcInternal.createTypeCode(_0_M._d_Bac)
omniORB.registerType(Bac._NP_RepositoryId, _0_M._d_Bac, _0_M._tc_Bac)

# Bac operations and attributes
Bac._d_startPredict = ((), (omniORB.tcInternal.tv_boolean, ), None)
Bac._d_getData = (((omniORB.tcInternal.tv_string,0), ), (), None)
Bac._d_predict = ((omniORB.tcInternal.tv_float, omniORB.tcInternal.tv_float, omniORB.tcInternal.tv_float), (omniORB.tcInternal.tv_float, ), None)

# Bac object reference
class _objref_Bac (CORBA.Object):
    _NP_RepositoryId = Bac._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def startPredict(self, *args):
        return self._obj.invoke("startPredict", _0_M.Bac._d_startPredict, args)

    def getData(self, *args):
        return self._obj.invoke("getData", _0_M.Bac._d_getData, args)

    def predict(self, *args):
        return self._obj.invoke("predict", _0_M.Bac._d_predict, args)

omniORB.registerObjref(Bac._NP_RepositoryId, _objref_Bac)
_0_M._objref_Bac = _objref_Bac
del Bac, _objref_Bac

# Bac skeleton
__name__ = "M__POA"
class Bac (PortableServer.Servant):
    _NP_RepositoryId = _0_M.Bac._NP_RepositoryId


    _omni_op_d = {"startPredict": _0_M.Bac._d_startPredict, "getData": _0_M.Bac._d_getData, "predict": _0_M.Bac._d_predict}

Bac._omni_skeleton = Bac
_0_M__POA.Bac = Bac
omniORB.registerSkeleton(Bac._NP_RepositoryId, Bac)
del Bac
__name__ = "M"

#
# End of module "M"
#
__name__ = "projet_idl"

_exported_modules = ( "M", )

# The end.
